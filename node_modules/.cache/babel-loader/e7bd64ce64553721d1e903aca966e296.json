{"ast":null,"code":"import _defineProperty from \"/Users/johntraut/code/clicky/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/johntraut/code/clicky/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { React, Component } from 'react';\nimport './App.css';\nimport Card from './components/ColorCard';\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      score: 0,\n      clicked: []\n    };\n\n    this.handleOnClick = id => {\n      let clickedArray = this.state.clicked; //if the id of image just clicked on is in the clicked array, minus one off of score and then empty clicked array\n\n      if (clickedArray.indexOf(id) > -1) {\n        this.setState({\n          clickedArray: [],\n          score: 0\n        });\n      } else {\n        let newState = _objectSpread({}, this.state);\n\n        newState.score++;\n        this.setSate(newState);\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.state.cards.map(card => {\n        React.createElement(Card, {\n          id: card.id,\n          image: card.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      }));\n    };\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/johntraut/code/clicky/src/App.js"],"names":["React","Component","Card","cards","App","state","score","clicked","handleOnClick","id","clickedArray","indexOf","setState","newState","setSate","map","card","image"],"mappings":";;;;;;;AAAA,SAAQA,KAAR,EAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;;AAGA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BI,KAF0B,GAElB;AACNF,MAAAA,KADM;AAGNG,MAAAA,KAAK,EAAE,CAHD;AAKNC,MAAAA,OAAO,EAAE;AALH,KAFkB;;AAAA,SAW5BC,aAX4B,GAWXC,EAAD,IAAQ;AAEtB,UAAIC,YAAY,GAAG,KAAKL,KAAL,CAAWE,OAA9B,CAFsB,CAIlB;;AACF,UAAGG,YAAY,CAACC,OAAb,CAAqBF,EAArB,IAA2B,CAAC,CAA/B,EAAiC;AAE/B,aAAKG,QAAL,CAAc;AAEZF,UAAAA,YAAY,EAAG,EAFH;AAIZJ,UAAAA,KAAK,EAAG;AAJI,SAAd;AASD,OAXD,MAWO;AAEL,YAAIO,QAAQ,qBAAO,KAAKR,KAAZ,CAAZ;;AAEAQ,QAAAA,QAAQ,CAACP,KAAT;AAEA,aAAKQ,OAAL,CAAaD,QAAb;AAED;;AAED,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEV,KAAKR,KAAL,CAAWF,KAAX,CAAiBY,GAAjB,CAAsBC,IAAI,IAAI;AAE7B,4BAAC,IAAD;AAAM,UAAA,EAAE,EAAEA,IAAI,CAACP,EAAf;AAAmB,UAAA,KAAK,EAAEO,IAAI,CAACC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,OAHA,CAFU,CAAP;AAQD,KA7CyB;AAAA;;AAAA;;AA+C5B,eAAeb,GAAf","sourcesContent":["import {React, Component} from 'react';\nimport './App.css';\nimport Card from './components/ColorCard';\nimport cards from \"./cards.json\";\n\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n\n    score: 0,\n\n    clicked: []\n  };\n\n\nhandleOnClick = (id) => {\n\n  let clickedArray = this.state.clicked\n\n      //if the id of image just clicked on is in the clicked array, minus one off of score and then empty clicked array\n    if(clickedArray.indexOf(id) > -1){\n\n      this.setState({\n\n        clickedArray : [],\n\n        score : 0\n\n      })\n     \n      \n    } else {\n\n      let newState = {...this.state};\n      \n      newState.score++;\n\n      this.setSate(newState)\n      \n    }\n\n    return <div>\n\n{this.state.cards.map( card => {\n\n  <Card id={card.id} image={card.image}/>\n}\n)}\n    </div>\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}