{"ast":null,"code":"import _defineProperty from \"/Users/johntraut/code/clicky/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/johntraut/code/clicky/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Card from './components/ColorCard';\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      score: 0,\n      clicked: []\n    };\n  }\n\n}\n\nhandleOnClick = id => {\n  let clickedArray = this.state.clicked; //if the id of image just clicked on is in the clicked array, minus one off of score and then empty clicked array\n\n  if (clickedArray.indexOf(id) > -1) {\n    this.setState({\n      clickedArray: [],\n      score: 0\n    });\n  } else {\n    let newState = _objectSpread({}, this.state);\n\n    newState.score++;\n    this.setSate(newState);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"cards.map(card => \", React.createElement(Card, {\n    id: card.id,\n    image: card.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), \")\");\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/johntraut/code/clicky/src/App.js"],"names":["React","Card","cards","App","Component","state","score","clicked","handleOnClick","id","clickedArray","indexOf","setState","newState","setSate","card","image"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;;AAGA,MAAMC,GAAN,SAAkBC,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BC,KAF0B,GAElB;AACNH,MAAAA,KADM;AAENI,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,OAAO,EAAE;AAHH,KAFkB;AAAA;;AAAA;;AAS5BC,aAAa,GAAIC,EAAD,IAAQ;AAEtB,MAAIC,YAAY,GAAG,KAAKL,KAAL,CAAWE,OAA9B,CAFsB,CAIlB;;AACF,MAAGG,YAAY,CAACC,OAAb,CAAqBF,EAArB,IAA2B,CAAC,CAA/B,EAAiC;AAE/B,SAAKG,QAAL,CAAc;AAEZF,MAAAA,YAAY,EAAG,EAFH;AAIZJ,MAAAA,KAAK,EAAG;AAJI,KAAd;AASD,GAXD,MAWO;AAEL,QAAIO,QAAQ,qBAAO,KAAKR,KAAZ,CAAZ;;AACAQ,IAAAA,QAAQ,CAACP,KAAT;AAEA,SAAKQ,OAAL,CAAaD,QAAb;AAED;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAGT,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAEE,IAAI,CAACN,EAAf;AAAmB,IAAA,KAAK,EAAEM,IAAI,CAACC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHS,MAAP;AAMD,CA/BH;;AAiCA,eAAeb,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './components/ColorCard'\nimport cards from \"./cards.json\"\n\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    score: 0,\n    clicked: []\n  };\n}\n\nhandleOnClick = (id) => {\n\n  let clickedArray = this.state.clicked\n\n      //if the id of image just clicked on is in the clicked array, minus one off of score and then empty clicked array\n    if(clickedArray.indexOf(id) > -1){\n\n      this.setState({\n\n        clickedArray : [],\n\n        score : 0\n\n      })\n     \n      \n    } else {\n\n      let newState = {...this.state};\n      newState.score++;\n\n      this.setSate(newState)\n      \n    }\n\n    return <div>\n\ncards.map(card => {\n  <Card id={card.id} image={card.image}/>\n})\n    </div>\n  }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}